import UIKit
//+1 –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: int, UInt, float, double, string. –£ —á–∏—Å–µ–ª –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. //
let integer1: Int
var integer2: Int
Int.max
Int.min
Int8.max
Int8.min
Int16.max
Int16.min
Int32.max
Int32.min
Int64.max
Int64.max

let UInt1: UInt
var UInt2: UInt
UInt.min
UInt.max
UInt8.max
UInt8.min
UInt16.max
UInt16.min
UInt32.max
UInt32.min
UInt64.max
UInt64.min

let float1: Float
var float2: Float
let maxFloat = Float.greatestFiniteMagnitude
let minFloat = Float.leastNormalMagnitude

let double1: Double
var double2: Double
let maxDouble = Double.greatestFiniteMagnitude
let minDouble = Double.leastNormalMagnitude

let string1: String
var string2: String

//2) –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ). –ò—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ typealias.
let good1: (Int, String) = (2, "apple")
let good2: (Int, String) = (3, "kiwi")
let good3: (Int, String) = (4, "pineapple")
let good4: (Int, String) = (5, "banana")

//+3) –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–∞.
let num1: Int = 3
let num2: Double = 4.34
let num3: Float = 3.45678
let sumABC = num1 + Int(num2) + Int(num3)
let subtractionABC = Double(num1) - num2 - Double(num3)
let multiplicationABC = Float(num1) * Float(num2) * num3


//+4) –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ, —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ). –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ÃÜ –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ: ¬´3 + 2 = 5¬ª.
let operand1: Int = 3
let operand2: Int = 2
let multiplication = operand1 * operand2
let division = Double(operand1) / Double(operand2)
let addition = operand1 + operand2
let subtraction = operand1 - operand2

print ("\(operand1) * \(operand2) = \(multiplication)")
print ("\(operand1) / \(operand2) = \(division)")
print ("\(operand1) + \(operand2) = \(addition)")
print("\(operand1) - \(operand2) = \(subtraction)")


// +5) Declare two constants a and b of type Double and assign both a value. Calculate the average of a and b and store the result in a constant named average.
let a: Double = 3.67
let b: Double = 7.98
let average = (a + b) / 2

//+6) A temperature expressed in ¬∞C can be converted to ¬∞F by multiplying by 1.8 then incrementing by 32. In this challenge, do the reverse: convert a temperature from ¬∞F to ¬∞C. Declare a constant named fahrenheit of type Double and assign it a value. Calculate the corresponding temperature in ¬∞C and store the result in a constant named celcius.
let fahrenheit: Double = 45.5
let celcius = (fahrenheit - 32) / 1.8

// +7) A circle is made up of 2ùúã radians, corresponding with 360 degrees. Declare a constant degrees of type Double and assign it an initial value. Calculate the corresponding angle in radians and store the result in a constant named radians.
// 2 * pi =  360

let degrees: Double = 23
let pi: Double = 3.1415926
let radians: Double = (2 * pi) / 360
print(radians)
/*
+8) Declare four constants named x1, y1, x2 and y2 of type Double. These constants represent the 2-dimensional coordinates of two points. Calculate the distance between these two points and store the result in a constant named distance.
*/
let x1: Double = 1
let y1: Double = 1
let x2: Double = 2
let y2: Double = 3
let distance: Double = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))
/*
2. –°—Ç—Ä–æ–∫–∏
+1) –ù–∞–ø–∏—à–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–æ–∫ —Å–≤–æ–µÃà —Ä–µ–∑—é–º–µ: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–¥–µ –∂–∏–≤–µ—Ç–µ, —Ö–æ–±–±–∏ –∏ —Ç.–ø.
 */
let name: String = "Anna"
let sername: String = "Zhdan"
let age: String = "25"
let address: String = "Minsk"
let hobby: String = "Wakeboarding"
/*
+2) –°–æ–±–µ—Ä–∏—Ç–µ –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ 1 –±–æ–ª—å—à—É—é (–≤—Å–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é) –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
 */
print("\(name) \(sername) \(age) \(address) \(hobby)")
/*
+3) –ù–∞–ø–∏—à–∏—Ç–µ 10 —Å—Ç—Ä–æ–∫, —Å–æ–±–µ—Ä–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–±–µ–ª—ã (—Å–º. \n –∏ \t).
*/
print("task3")
print("\n \(name) \t \(sername) \t \(age) \t \(address) \t \(hobby) \t \(name) \t \(sername) \t \(age) \t \(address) \t \(hobby)")
/*
+4) –†–∞–∑–±–µ–∏ÃÜ—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—è –∫–∞–∂–¥—É—é –±—É–∫–≤—É –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
*/
print("A\nn\nn\na" )
/*
+5) –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ Int –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ String.
–¢–∏–ø Int –ø—Ä–µ–æ–±—Ä–∞–∑—É–∏ÃÜ—Ç–µ –≤ String –∏ —Å –ø–æ–º–æ—â—å—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–∏—Ç–µ 2 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
*/
let age1: Int = 25
let resultTask5: String = "\(name)\t" + String(age1)
/*
+6) Create a string constant called firstName and initialize it to your first name. Also create a string constant called lastName and initialize it to your last name.
*/
let firstName: String = name
let lastName: String = sername
/*
+7) Create a string constant called fullName by adding the firstName and lastName constants together, separated by a space.
*/
let fullName: String = "\(firstName)" + " " + "\(lastName)"
/*
+8) Using interpolation, create a string constant called myDetails that uses the fullName constant to create a string introducing yourself. For example, my string would read: "Hello, my name is Matt Galloway.".
*/
let myDetails: String = "Hello, my name is \(fullName)."
/*
3. Tuples
 
+1) –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ —Å 3-5 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –í—ã–≤–µ—Å—Ç–∏ –∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å 3 —Å–ø–æ—Å–æ–±–∞–º–∏.
*/
let infoAboutAnna: (String, String, Int, String, String) = ("Anna", "Zhdan", 25, "Minsk", "Wakeboarding")
let (ElementOne, ElementTwo, ElementThree, ElementFour, ElementFive) = infoAboutAnna

print(infoAboutAnna)
print("Hello, my name is \(infoAboutAnna.0), my sername is \(infoAboutAnna.1). I'm \(infoAboutAnna.2) years old. I live in \(infoAboutAnna.3). My hobby is \(infoAboutAnna.4)")
print("\(infoAboutAnna.0), \(infoAboutAnna.1), \(infoAboutAnna.2), \(infoAboutAnna.3), \(infoAboutAnna.4)")
print(ElementOne, ElementTwo, ElementThree, ElementFour, ElementFive)
/*
+2) –î–∞–≤–∞–∏ÃÜ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ì–ê–ò –∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–∏ÃÜ. –ó–∞–¥–∞—á–∞. –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ —Å —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
- –ø–µ—Ä–≤—ã–∏ÃÜ - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏ÃÜ–º–∞–Ω–Ω—ã—Ö;
- –≤—Ç–æ—Ä–æ–∏ÃÜ - –≤–æ–∂–¥–µ–Ω–∏–µ –Ω–µ—Ç—Ä–µ–∑–≤—ã–º: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏ÃÜ–º–∞–Ω–Ω—ã—Ö;
- —Ç—Ä–µ—Ç–∏–∏ÃÜ - –±–µ—Å–ø—Ä–∞–≤–Ω–∏–∫–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏ÃÜ–º–∞–Ω–Ω—ã—Ö.
–†–∞—Å–ø–µ—á–∞—Ç–∞–∏ÃÜ—Ç–µ –Ω–∞—à–∏—Ö –±–µ–¥–æ–∫—É—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å —á–µ—Ä–µ–∑ print().
*/
let bedoqureOne: (Int, Int, Int) = (overSpeed: 10, drunkDriving: 23, lawless: 56)
let (Element1, Element2, Element3) = bedoqureOne
print("overSpeed: \(bedoqureOne.0), drunkDriving: \(bedoqureOne.1), lawless: \(bedoqureOne.2)")
/*
+3) –í—ã–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–∏ÃÜ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Å–æ–ª—å. –¢—Ä–µ–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.
*/
print(bedoqureOne.0)
print(Element2)
print(bedoqureOne.self.2)
/*
+4) –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –≤—Ç–æ—Ä–æ–∏ÃÜ –∫–æ—Ä—Ç–µ–∂ ‚Äî –Ω–∞—à–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞. –ó–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–∏ÃÜ—Ç–µ –¥—Ä—É–≥–∏–µ.
*/
let bedoqureTwo: (Int, Int, Int) = (overSpeed: 34, drunkDriving: 14, lawless: 67)
/*
+5) –ü—É—Å—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–∏ —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è: —Å–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ç—Ä–µ—Ç–∏–∏ÃÜ –∫–æ—Ä—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –≤—Ç–æ—Ä—ã–º.
*/
let differenceBetweenMates: (Int, Int, Int) = (overoverSpeed: bedoqureOne.0 - bedoqureTwo.0, drunkDriving: bedoqureOne.1 - bedoqureTwo.1, lawless: bedoqureOne.2 - bedoqureTwo.2)
/*
+6) Declare a constant tuple that contains three Int values followed by a Double. Use this to represent a date (month, day, year) followed by an average temperature for that date.
*/
let date: (Int, Int, Int) = (11, 08, 2022)
var temprature: Double = 23
/*
   + 7) Change the tuple to name the constituent components. Give them names related to the data that they contain: month, day, year and averageTemperature.
*/
var changedTuple: (Int, Int, Int, Double) = (day: date.0, month: date.1, year: date.2, averageTemperature: temprature)
/*
    +8) In one line, read the day and average temperature values into two constants. You‚Äôll need to employ the underscore to ignore the month and year.
*/
print("Day is \(changedTuple.0), _, _, averageTemperature is \(changedTuple.3)")
/*
    +9) Up until now, you‚Äôve only seen constant tuples. But you can create variable tuples, too. Change the tuple you created in the exercises above to a variable by using var instead of let. Now change the average temperature to a new value.
*/
temprature = 21.5
changedTuple = (day: date.0, month: date.1, year: date.2, averageTemperature: temprature)
print(changedTuple)
